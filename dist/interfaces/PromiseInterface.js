// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.

  // нужен, чтобы предоставить абстракцию промиса как такового. с виртуальными методами.
  // по коду будут использоваться и иметь схожее с обычными промисами апи.
  // инициализироваться они будут по разному (для ноды, в декоратор будет засовываться нативный промис, а для аранги, специальный объект, предоставляемый отдельным npm-пакетом, реализация которого будет строго синхронной для совместимости с платформой arangodb)
  /*
  A Promise is in one of these states:

  pending: initial state, not fulfilled or rejected.
  fulfilled: meaning that the operation completed successfully.
  rejected: meaning that the operation failed.
  */
  module.exports = function(Module) {
    var AnyT, FuncG, Interface, MaybeG, PromiseInterface, PromiseT;
    ({Interface, FuncG, MaybeG, AnyT, PromiseT} = Module.prototype);
    return PromiseInterface = (function() {
      class PromiseInterface extends Interface {};

      PromiseInterface.inheritProtected();

      PromiseInterface.module(Module);

      PromiseInterface.virtual({
        catch: FuncG(Function, PromiseT)
      });

      PromiseInterface.virtual({
        'then': FuncG([Function, MaybeG(Function)], PromiseT)
      });

      PromiseInterface.virtual({
        finally: FuncG(Function, PromiseT)
      });

      PromiseInterface.virtual(PromiseInterface.static({
        all: FuncG(Array, PromiseT)
      }));

      PromiseInterface.virtual(PromiseInterface.static({
        reject: FuncG(Error, PromiseT)
      }));

      PromiseInterface.virtual(PromiseInterface.static({
        resolve: FuncG(AnyT, PromiseT)
      }));

      PromiseInterface.virtual(PromiseInterface.static({
        race: FuncG(Array, PromiseT)
      }));

      PromiseInterface.initialize();

      return PromiseInterface;

    }).call(this);
  };

}).call(this);
