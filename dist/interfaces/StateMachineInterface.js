// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(Module) {
    var DictG, FuncG, HookedObjectInterface, ListG, MaybeG, NilT, StateInterface, StateMachineInterface, TransitionInterface, UnionG;
    ({NilT, MaybeG, DictG, FuncG, ListG, UnionG, HookedObjectInterface, StateInterface, TransitionInterface} = Module.prototype);
    return StateMachineInterface = (function() {
      class StateMachineInterface extends HookedObjectInterface {};

      StateMachineInterface.inheritProtected();

      StateMachineInterface.module(Module);

      StateMachineInterface.virtual({
        currentState: MaybeG(StateInterface)
      });

      StateMachineInterface.virtual({
        initialState: MaybeG(StateInterface)
      });

      StateMachineInterface.public({
        states: DictG(String, StateInterface)
      });

      StateMachineInterface.virtual(StateMachineInterface.async({
        doBeforeReset: Function
      }));

      StateMachineInterface.virtual(StateMachineInterface.async({
        doAfterReset: Function
      }));

      StateMachineInterface.virtual(StateMachineInterface.async({
        doBeforeAllEvents: Function
      }));

      StateMachineInterface.virtual(StateMachineInterface.async({
        doAfterAllEvents: Function
      }));

      StateMachineInterface.virtual(StateMachineInterface.async({
        doAfterAllTransitions: Function
      }));

      StateMachineInterface.virtual(StateMachineInterface.async({
        doErrorOnAllEvents: Function
      }));

      StateMachineInterface.virtual(StateMachineInterface.async({
        doWithAnchorUpdateState: Function
      }));

      StateMachineInterface.virtual(StateMachineInterface.async({
        doWithAnchorRestoreState: Function
      }));

      StateMachineInterface.virtual(StateMachineInterface.async({
        doWithAnchorSave: Function
      }));

      StateMachineInterface.virtual({
        registerState: FuncG([String, MaybeG(Object)], StateInterface)
      });

      StateMachineInterface.virtual({
        removeState: FuncG(String, Boolean)
      });

      StateMachineInterface.virtual({
        registerEvent: FuncG([String, UnionG(String, ListG(String)), String, MaybeG(Object), MaybeG(Object)], NilT)
      });

      StateMachineInterface.virtual(StateMachineInterface.async({
        reset: Function
      }));

      StateMachineInterface.virtual(StateMachineInterface.async({
        send: FuncG(String, NilT)
      }));

      StateMachineInterface.virtual(StateMachineInterface.async({
        transitionTo: FuncG([StateInterface, TransitionInterface], NilT)
      }));

      StateMachineInterface.virtual({
        beforeAllEvents: FuncG(String, NilT)
      });

      StateMachineInterface.virtual({
        afterAllTransitions: FuncG(String, NilT)
      });

      StateMachineInterface.virtual({
        afterAllEvents: FuncG(String, NilT)
      });

      StateMachineInterface.virtual({
        errorOnAllEvents: FuncG(String, NilT)
      });

      StateMachineInterface.virtual({
        withAnchorUpdateState: FuncG(String, NilT)
      });

      StateMachineInterface.virtual({
        withAnchorSave: FuncG(String, NilT)
      });

      StateMachineInterface.virtual({
        withAnchorRestoreState: FuncG(String, NilT)
      });

      StateMachineInterface.virtual({
        state: FuncG([String, MaybeG(Object)], NilT)
      });

      StateMachineInterface.virtual({
        event: FuncG([String, UnionG(Object, Function), MaybeG(Function)], NilT)
      });

      StateMachineInterface.virtual({
        transition: FuncG([ListG(String), String, MaybeG(Object)], NilT)
      });

      StateMachineInterface.initialize();

      return StateMachineInterface;

    }).call(this);
  };

}).call(this);
