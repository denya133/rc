// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(Module) {
    var CACHE, Generic, PRODUCTION, SOFT, _, assert, createByType, getTypeName, typesCache, valueIsType;
    ({
      PRODUCTION,
      CACHE,
      SOFT,
      Generic,
      Utils: {
        _,
        t: {assert},
        getTypeName,
        createByType,
        valueIsType
      }
    } = Module.prototype);
    typesCache = new Map();
    return Module.defineGeneric(Generic('MaybeG', function(Type) {
      var Maybe, MaybeID, cachedType, displayName;
      Type = Module.prototype.AccordG(Type != null ? Type : Module.prototype.AnyT);
      if (Module.environment !== PRODUCTION) {
        assert(_.isFunction(Type), `Invalid argument Type ${assert.stringify(Type)} supplied to MaybeG(Type) (expected a function)`);
      }
      displayName = `?(${getTypeName(Type)})`;
      MaybeID = `?(${Type.ID})`;
      if ((cachedType = typesCache.get(MaybeID)) != null) {
        return cachedType;
      }
      Maybe = function(value, path) {
        if (Module.environment === PRODUCTION) {
          return value;
        }
        Maybe.isNotSample(this);
        if (Type === Module.prototype.AnyT) {
          return value;
        }
        if (Maybe.has(value)) {
          return value;
        }
        if (path == null) {
          path = [Maybe.displayName];
        }
        if (Module.prototype.NilT.is(value)) {
          return value;
        }
        createByType(Type, value, path);
        Maybe.keep(value);
        return value;
      };
      // Reflect.defineProperty Maybe, 'cache',
      //   configurable: no
      //   enumerable: yes
      //   writable: no
      //   value: new Set()
      Reflect.defineProperty(Maybe, 'cacheStrategy', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: SOFT
      });
      Reflect.defineProperty(Maybe, 'ID', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: MaybeID
      });
      Module.prototype.SOFT_CACHE.set(MaybeID, new Set());
      Reflect.defineProperty(Maybe, 'has', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.SOFT_CACHE.get(MaybeID).has(value);
        }
      });
      Reflect.defineProperty(Maybe, 'keep', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.SOFT_CACHE.get(MaybeID).add(value);
        }
      });
      Reflect.defineProperty(Maybe, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Maybe, 'displayName', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Maybe, 'is', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(x) {
          var result;
          if (Maybe.has(x)) {
            return true;
          }
          result = Module.prototype.NilT.is(x) || valueIsType(x, Type);
          if (result) {
            Maybe.keep(x);
          }
          return result;
        }
      });
      Reflect.defineProperty(Maybe, 'meta', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: {
          kind: 'maybe',
          type: Type,
          name: Maybe.displayName,
          identity: true
        }
      });
      Reflect.defineProperty(Maybe, 'isNotSample', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: Module.prototype.NotSampleG(Maybe)
      });
      typesCache.set(MaybeID, Maybe);
      CACHE.set(Maybe, MaybeID);
      return Maybe;
    }));
  };

}).call(this);
