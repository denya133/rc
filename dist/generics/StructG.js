// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.

  // Есть понимание что Interface, Struct and Class НЕ тождественные понятия.
  // если описывается класс в его конструкторе может быть передано что угодно, таким образом проводится создание инстанса класса.
  // описание Struct не подходит для проверки инстансов классов и наоборот, т.к. instanceof вернут в обоих случаях false
  // проверка же интерфейса хоть и осуществляет проверку "вроде бы правильно", но опосредованно, т.к. переданный объект может не являться инстансом именно этого "Interface"а - задача интерфейса обеспечить полиморфизм

  // таким образом, если надо проверить некоторый объект, как инстанс подкласса Object нужно воспользоваться именно этим Struct генериком.

  // struct генерик нужено использовать в тех случаях, когда надо объявить тип для структуры, в которой должны быть определенные имена ключей с определенными (не одинаковыми) типами значений.

  // при этом по функционированию struct не будет отличаться принципиально от интерфейса кроме 2 пунктов:
  // - в отличие от интерфейса проверка имен ключей будет прозводиться 'строго', т.е. в проверяемом объекте должны быть строго только те ключи, которые объявлены в struct И НЕ БОЛЕЕ.
  // - семантически, т.е. struct НЕ ДОЛЖЕН использоваться для проверки инстансов классов и самих классов - для них должен использоваться интерфейс, в то время как любые сложные (не словари) объекты "не инстансы кастомных классов" должны проверяться именно struct'ами.

  // NOTE: options.defaultProps не добавляем, т.к. Struct не должен инстанцировать объекты через new, а должен только проверить в строгом режиме уже существующие объекты, а следовательно ленивое описание дефолтов не может быть использовано.
  // NOTE: options вторым аргументом не принимаем, т.к. defaultProps не должен быть, а strict - по умолчанию всегда true, name - как и во всех других генериках не передаем.
  var hasProp = {}.hasOwnProperty;

  module.exports = function(Module) {
    var CACHE, Generic, PRODUCTION, WEAK, _, assert, createByType, getTypeName, typesCache, valueIsType;
    ({
      PRODUCTION,
      CACHE,
      WEAK,
      Generic,
      Utils: {
        _,
        // uuid
        t: {assert},
        getTypeName,
        createByType,
        valueIsType
      }
    } = Module.prototype);
    // typesDict = new Map()
    typesCache = new Map();
    return Module.defineGeneric(Generic('StructG', function(props) {
      var Struct, StructID, T, ValueType, cachedType, displayName, k, new_props, t;
      if (Module.environment !== PRODUCTION) {
        assert(Module.prototype.DictG(String, Function).is(props), `Invalid argument props ${assert.stringify(props)} supplied to StructG(props) (expected a dictionary String -> Type)`);
      }
      // _ids = []
      new_props = {};
      for (k in props) {
        if (!hasProp.call(props, k)) continue;
        ValueType = props[k];
        t = Module.prototype.AccordG(ValueType);
        // unless (id = CACHE.get k)?
        //   id = uuid.v4()
        //   CACHE.set k, id
        // _ids.push id
        // unless (id = CACHE.get t)?
        //   id = uuid.v4()
        //   CACHE.set t, id
        // _ids.push id
        new_props[k] = t;
      }
      // StructID = _ids.join()
      props = new_props;
      displayName = `Struct{${((function() {
        var results;
        results = [];
        for (k in props) {
          if (!hasProp.call(props, k)) continue;
          T = props[k];
          results.push(`${k}: ${getTypeName(T)}`);
        }
        return results;
      })()).join(', ')}}`;
      StructID = `Struct{${((function() {
        var results;
        results = [];
        for (k in props) {
          if (!hasProp.call(props, k)) continue;
          T = props[k];
          results.push(`${k}: ${T.ID}`);
        }
        return results;
      })()).join(', ')}}`;
      if ((cachedType = typesCache.get(StructID)) != null) {
        return cachedType;
      }
      Struct = function(value, path) {
        var actual, expected;
        if (Module.environment === PRODUCTION) {
          return value;
        }
        Struct.isNotSample(this);
        if (Struct.has(value)) {
          return value;
        }
        if (path == null) {
          path = [Struct.displayName];
        }
        assert(_.isPlainObject(value), `Invalid value ${assert.stringify(value)} supplied to ${path.join('.')} (expected a plain object)`);
        for (k in value) {
          if (!hasProp.call(value, k)) continue;
          assert(props.hasOwnProperty(k), `Invalid prop \"${k}\" supplied to ${path.join('.')}`);
        }
        for (k in props) {
          if (!hasProp.call(props, k)) continue;
          expected = props[k];
          assert(value.hasOwnProperty(k), `Invalid prop \"${k}\" supplied to ${path.join('.')}`);
          actual = value[k];
          createByType(expected, actual, path.concat(`${k}: ${getTypeName(expected)}`));
        }
        Struct.keep(value);
        return value;
      };
      // Reflect.defineProperty Struct, 'cache',
      //   configurable: no
      //   enumerable: yes
      //   writable: no
      //   value: new Set()
      Reflect.defineProperty(Struct, 'cacheStrategy', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: WEAK
      });
      Reflect.defineProperty(Struct, 'ID', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: StructID
      });
      Module.prototype.WEAK_CACHE.set(StructID, new WeakSet());
      Reflect.defineProperty(Struct, 'has', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.WEAK_CACHE.get(StructID).has(value);
        }
      });
      Reflect.defineProperty(Struct, 'keep', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.WEAK_CACHE.get(StructID).add(value);
        }
      });
      Reflect.defineProperty(Struct, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Struct, 'displayName', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Struct, 'is', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(x) {
          var res, result, v;
          if (Struct.has(x)) {
            return true;
          }
          result = _.isPlainObject(x) && ((function() {
            res = true;
            for (k in x) {
              if (!hasProp.call(x, k)) continue;
              res = res && props.hasOwnProperty(k);
            }
            for (k in props) {
              if (!hasProp.call(props, k)) continue;
              v = props[k];
              res = res && x.hasOwnProperty(k);
              res = res && valueIsType(x[k], v);
            }
            return res;
          })());
          if (result) {
            Struct.keep(x);
          }
          return result;
        }
      });
      Reflect.defineProperty(Struct, 'meta', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: {
          kind: 'interface',
          props: props,
          name: Struct.displayName,
          identity: true,
          strict: true
        }
      });
      Reflect.defineProperty(Struct, 'isNotSample', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: Module.prototype.NotSampleG(Struct)
      });
      typesCache.set(StructID, Struct);
      CACHE.set(Struct, StructID);
      return Struct;
    }));
  };

}).call(this);
