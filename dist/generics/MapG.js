// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(Module) {
    var CACHE, Generic, PRODUCTION, WEAK, _, assert, createByType, getTypeName, typesCache, valueIsType;
    ({
      PRODUCTION,
      CACHE,
      WEAK,
      Generic,
      Utils: {
        _,
        // uuid
        t: {assert},
        getTypeName,
        createByType,
        valueIsType
      }
    } = Module.prototype);
    typesCache = new Map();
    return Module.defineGeneric(Generic('MapG', function(KeyType, ValueType) {
      var MapID, _Map, cachedType, displayName, keyTypeNameCache, valueTypeNameCache;
      KeyType = Module.prototype.AccordG(KeyType);
      ValueType = Module.prototype.AccordG(ValueType);
      if (Module.environment !== PRODUCTION) {
        assert(_.isFunction(KeyType), `Invalid argument KeyType ${assert.stringify(KeyType)} supplied to MapG(KeyType, ValueType) (expected a function)`);
        assert(_.isFunction(ValueType), `Invalid argument ValueType ${assert.stringify(ValueType)} supplied to MapG(KeyType, ValueType) (expected a function)`);
      }
      keyTypeNameCache = getTypeName(KeyType);
      valueTypeNameCache = getTypeName(ValueType);
      displayName = `Map< ${keyTypeNameCache}, ${valueTypeNameCache} >`;
      MapID = `Map< ${KeyType.ID}, ${ValueType.ID} >`;
      // _ids = []
      // unless (id = CACHE.get KeyType)?
      //   id = uuid.v4()
      //   CACHE.set KeyType, id
      // _ids.push id
      // unless (id = CACHE.get ValueType)?
      //   id = uuid.v4()
      //   CACHE.set ValueType, id
      // _ids.push id
      // MapID = _ids.join()
      if ((cachedType = typesCache.get(MapID)) != null) {
        return cachedType;
      }
      _Map = function(value, path) {
        if (Module.environment === PRODUCTION) {
          return value;
        }
        _Map.isNotSample(this);
        if (_Map.has(value)) {
          return value;
        }
        if (path == null) {
          path = [_Map.displayName];
        }
        assert(_.isMap(value), `Invalid value ${assert.stringify(value)} supplied to ${path.join('.')} (expected an map of [${keyTypeNameCache}, ${valueTypeNameCache}])`);
        value.forEach(function(v, k) {
          var _k;
          createByType(KeyType, k, path.concat(keyTypeNameCache));
          _k = _.isSymbol(k) ? Symbol.keyFor(k) : k;
          return createByType(ValueType, v, path.concat(`${_k}: ${valueTypeNameCache}`));
        });
        _Map.keep(value);
        return value;
      };
      // Reflect.defineProperty _Map, 'cache',
      //   configurable: no
      //   enumerable: yes
      //   writable: no
      //   value: new Set()
      Reflect.defineProperty(_Map, 'cacheStrategy', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: WEAK
      });
      Reflect.defineProperty(_Map, 'ID', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: MapID
      });
      Module.prototype.WEAK_CACHE.set(MapID, new WeakSet());
      Reflect.defineProperty(_Map, 'has', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.WEAK_CACHE.get(MapID).has(value);
        }
      });
      Reflect.defineProperty(_Map, 'keep', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.WEAK_CACHE.get(MapID).add(value);
        }
      });
      Reflect.defineProperty(_Map, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(_Map, 'displayName', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(_Map, 'is', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(x) {
          var res, result;
          if (_Map.has(x)) {
            return true;
          }
          result = _.isMap(x) && (res = true, x.forEach(function(v, k) {
            return res = res && valueIsType(k, KeyType) && valueIsType(v, ValueType);
          }), res);
          if (result) {
            _Map.keep(x);
          }
          return result;
        }
      });
      Reflect.defineProperty(_Map, 'meta', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: {
          kind: 'map',
          domain: KeyType,
          codomain: ValueType,
          name: _Map.displayName,
          identity: true
        }
      });
      Reflect.defineProperty(_Map, 'isNotSample', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: Module.prototype.NotSampleG(_Map)
      });
      // unless (subCache = typesCache.get KeyType)?
      //   subCache = new Map()
      //   typesCache.set KeyType, subCache
      // subCache.set ValueType, _Map
      typesCache.set(MapID, _Map);
      CACHE.set(_Map, MapID);
      return _Map;
    }));
  };

}).call(this);
