// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(Module) {
    var CACHE, Generic, PRODUCTION, SOFT, _, assert;
    ({
      PRODUCTION,
      CACHE,
      SOFT,
      Utils: {
        _,
        t: {assert}
      }
    } = Module.prototype);
    Generic = function(name, definition) {
      var GenericID;
      if (Module.environment !== PRODUCTION) {
        assert(_.isString(name), `Invalid argument name ${assert.stringify(name)} supplied to Generic(name, definition) (expected a string)`);
        assert(_.isFunction(definition), `Invalid argument definition ${assert.stringify(definition)} supplied to Generic(name, definition) (expected a function)`);
        assert(!(definition instanceof Generic), "Cannot use the new operator to instantiate the type Generic");
      }
      GenericID = name;
      Reflect.defineProperty(definition, 'cacheStrategy', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: SOFT
      });
      Reflect.defineProperty(definition, 'ID', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: GenericID
      });
      Reflect.defineProperty(definition, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: name
      });
      Reflect.defineProperty(definition, 'displayName', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: name
      });
      Reflect.defineProperty(definition, 'meta', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: {
          kind: 'generic',
          name: definition.displayName,
          identity: true
        }
      });
      CACHE.set(definition, GenericID);
      return definition;
    };
    Reflect.defineProperty(Generic, 'name', {
      configurable: false,
      enumerable: true,
      writable: false,
      value: 'Generic'
    });
    Reflect.defineProperty(Generic, 'displayName', {
      configurable: false,
      enumerable: true,
      writable: false,
      value: 'Generic'
    });
    Reflect.defineProperty(Generic, 'meta', {
      configurable: false,
      enumerable: true,
      writable: false,
      value: {
        kind: 'generic',
        name: 'Generic',
        identity: true
      }
    });
    return Module.defineGeneric(Generic);
  };

}).call(this);
