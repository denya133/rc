// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(Module) {
    var CACHE, Generic, PRODUCTION, WEAK, _, assert, createByType, getTypeName, typesCache, valueIsType;
    ({
      PRODUCTION,
      CACHE,
      WEAK,
      Generic,
      Utils: {
        _,
        t: {assert},
        getTypeName,
        createByType,
        valueIsType
      }
    } = Module.prototype);
    typesCache = new Map();
    return Module.defineGeneric(Generic('ListG', function(Type) {
      var List, ListID, cachedType, displayName, typeNameCache;
      Type = Module.prototype.AccordG(Type);
      if (Module.environment !== PRODUCTION) {
        assert(_.isFunction(Type), `Invalid argument Type ${assert.stringify(Type)} supplied to ListG(Type) (expected a function)`);
      }
      typeNameCache = getTypeName(Type);
      displayName = `Array< ${typeNameCache} >`;
      ListID = `Array< ${Type.ID} >`;
      if ((cachedType = typesCache.get(ListID)) != null) {
        return cachedType;
      }
      List = function(value, path) {
        var actual, i, j, len;
        if (Module.environment === PRODUCTION) {
          return value;
        }
        List.isNotSample(this);
        if (List.has(value)) {
          return value;
        }
        if (path == null) {
          path = [List.displayName];
        }
        assert(_.isArray(value), `Invalid value ${assert.stringify(value)} supplied to ${path.join('.')} (expected an array of ${typeNameCache})`);
        for (i = j = 0, len = value.length; j < len; i = ++j) {
          actual = value[i];
          createByType(Type, actual, path.concat(`${i}: ${typeNameCache}`));
        }
        List.keep(value);
        return value;
      };
      // Reflect.defineProperty List, 'cache',
      //   configurable: no
      //   enumerable: yes
      //   writable: no
      //   value: new Set()
      Reflect.defineProperty(List, 'cacheStrategy', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: WEAK
      });
      Reflect.defineProperty(List, 'ID', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: ListID
      });
      Module.prototype.WEAK_CACHE.set(ListID, new WeakSet());
      Reflect.defineProperty(List, 'has', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.WEAK_CACHE.get(ListID).has(value);
        }
      });
      Reflect.defineProperty(List, 'keep', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.WEAK_CACHE.get(ListID).add(value);
        }
      });
      Reflect.defineProperty(List, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(List, 'displayName', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(List, 'is', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(x) {
          var result;
          if (List.has(x)) {
            return true;
          }
          result = _.isArray(x) && x.length !== 0 && x.every(function(e) {
            return valueIsType(e, Type);
          });
          if (result) {
            List.keep(x);
          }
          return result;
        }
      });
      Reflect.defineProperty(List, 'meta', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: {
          kind: 'list',
          type: Type,
          name: List.displayName,
          identity: true
        }
      });
      Reflect.defineProperty(List, 'isNotSample', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: Module.prototype.NotSampleG(List)
      });
      typesCache.set(ListID, List);
      CACHE.set(List, ListID);
      return List;
    }));
  };

}).call(this);
