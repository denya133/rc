// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(Module) {
    var Generic, PRODUCTION, _, assert, cache, getTypeName;
    ({
      PRODUCTION,
      Generic,
      Utils: {
        _,
        t: {assert},
        getTypeName
      }
    } = Module.prototype);
    cache = new Map();
    return Module.defineGeneric(Generic('AccordG', function(AnyClass) {
      var Type, cachedType, displayName;
      if (Module.environment !== PRODUCTION) {
        assert(_.isFunction(AnyClass), `Invalid argument AnyClass ${assert.stringify(AnyClass)} supplied to AccordG(AnyClass) (expected a function)`);
      }
      if (AnyClass === Module.prototype.ANY || AnyClass === Module.prototype.NILL || AnyClass === Module.prototype.LAMBDA || AnyClass === Promise || AnyClass === Module.prototype.Promise || AnyClass === Generic || AnyClass === Module.prototype.Class || AnyClass === Module.prototype.Mixin || AnyClass === Module.prototype.Module || AnyClass === Module.prototype.Interface) {
        displayName = getTypeName(AnyClass);
        if ((cachedType = cache.get(AnyClass)) != null) {
          return cachedType;
        }
        Type = (function() {
          switch (AnyClass) {
            case Module.prototype.ANY:
              return Module.prototype['AnyT'];
            case Module.prototype.NILL:
              return Module.prototype['NilT'];
            case Module.prototype.LAMBDA:
              return Module.prototype['LambdaT'];
            case Promise:
            case Module.prototype.Promise:
              return Module.prototype['PromiseT'];
            case Generic:
              return Module.prototype['GenericT'];
            case Module.prototype.Class:
              return Module.prototype['ClassT'];
            case Module.prototype.Mixin:
              return Module.prototype['MixinT'];
            case Module.prototype.Module:
              return Module.prototype['ModuleT'];
            case Module.prototype.Interface:
              return Module.prototype['InterfaceT'];
          }
        })();
        cache.set(AnyClass, Type);
        return Type;
      }
      if (Module.prototype.TypeT.is(AnyClass)) {
        return AnyClass;
      }
      displayName = getTypeName(AnyClass);
      if ((cachedType = cache.get(AnyClass)) != null) {
        return cachedType;
      }
      Type = (function() {
        switch (AnyClass) {
          case Function:
            return Module.prototype['FunctionT'];
          case String:
            return Module.prototype['StringT'];
          case Number:
            return Module.prototype['NumberT'];
          case Boolean:
            return Module.prototype['BooleanT'];
          case Date:
            return Module.prototype['DateT'];
          case Object:
            return Module.prototype['ObjectT'];
          case Array:
            return Module.prototype['ArrayT'];
          case Map:
            return Module.prototype['MapT'];
          case Set:
            return Module.prototype['SetT'];
          case RegExp:
            return Module.prototype['RegExpT'];
          case Symbol:
            return Module.prototype['SymbolT'];
          case Error:
            return Module.prototype['ErrorT'];
          case Buffer:
            return Module.prototype['BufferT'];
          case require('stream'):
            return Module.prototype['StreamT'];
          case require('events'):
            return Module.prototype['EventEmitterT'];
          default:
            return AnyClass;
        }
      })();
      cache.set(AnyClass, Type);
      return Type;
    }));
  };

}).call(this);
