// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(Module) {
    var CACHE, Generic, NON, PRODUCTION, SOFT, STRONG, WEAK, _, assert, createByType, getTypeName, typesCache, valueIsType;
    ({
      PRODUCTION,
      CACHE,
      STRONG,
      WEAK,
      SOFT,
      NON,
      Generic,
      Utils: {
        _,
        // uuid
        t: {assert},
        getTypeName,
        createByType,
        valueIsType
      }
    } = Module.prototype);
    // typesDict = new Map()
    typesCache = new Map();
    return Module.defineGeneric(Generic('SubtypeG', function(Type, name, predicate, cacheStrategy) {
      var Subtype, SubtypeID, cachedType, displayName;
      Type = Module.prototype.AccordG(Type);
      if (Module.environment !== PRODUCTION) {
        assert(_.isFunction(Type), `Invalid argument Type ${assert.stringify(Type)} supplied to SubtypeG(Type, name, predicate) (expected a function)`);
        assert(_.isString(name), `Invalid argument name ${assert.stringify(name)} supplied to SubtypeG(Type, name, predicate) (expected a string)`);
        assert(_.isFunction(predicate), `Invalid argument predicate ${assert.stringify(predicate)} supplied to SubtypeG(Type, name, predicate) (expected a function)`);
      }
      displayName = `{${getTypeName(Type)} | ${name}}`;
      SubtypeID = `{${Type.ID} | ${name}}`;
      // _ids = []
      // unless (id = CACHE.get Type)?
      //   id = uuid.v4()
      //   CACHE.set Type, id
      // _ids.push id
      // unless (id = CACHE.get name)?
      //   id = uuid.v4()
      //   CACHE.set name, id
      // _ids.push id
      // # unless (id = CACHE.get predicate)?
      // #   id = uuid.v4()
      // #   CACHE.set predicate, id
      // # _ids.push id
      // SubtypeID = _ids.join()

      // if (cachedType = typesCache.get SubtypeID)?
      //   return cachedType
      if ((cachedType = typesCache.get(SubtypeID)) != null) {
        return cachedType;
      }
      Subtype = function(value, path) {
        var x;
        if (Module.environment === PRODUCTION) {
          return value;
        }
        Subtype.isNotSample(this);
        if (Subtype.has(value)) {
          return value;
        }
        if (path == null) {
          path = [Subtype.displayName];
        }
        x = createByType(Type, value, path);
        assert(Subtype.is(x), `Invalid value ${assert.stringify(value)} supplied to ${path.join('.')}`);
        Subtype.keep(value);
        return value;
      };
      // Reflect.defineProperty Subtype, 'cache',
      //   configurable: no
      //   enumerable: yes
      //   writable: no
      //   value: new Set()
      Reflect.defineProperty(Subtype, 'cacheStrategy', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: cacheStrategy != null ? cacheStrategy : Type.cacheStrategy
      });
      Reflect.defineProperty(Subtype, 'ID', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: SubtypeID
      });
      switch (Subtype.cacheStrategy) {
        case STRONG:
          if (!Module.prototype.STRONG_CACHE.has(SubtypeID)) {
            Module.prototype.STRONG_CACHE.set(SubtypeID, new Set());
          }
          break;
        case WEAK:
          Module.prototype.WEAK_CACHE.set(SubtypeID, new WeakSet());
          break;
        case SOFT:
          Module.prototype.SOFT_CACHE.set(SubtypeID, new Set());
      }
      Reflect.defineProperty(Subtype, 'has', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: (function() {
          switch (Subtype.cacheStrategy) {
            case STRONG:
              return function(value) {
                return Module.prototype.STRONG_CACHE.get(SubtypeID).has(value);
              };
            case WEAK:
              return function(value) {
                return Module.prototype.WEAK_CACHE.get(SubtypeID).has(value);
              };
            case SOFT:
              return function(value) {
                return Module.prototype.SOFT_CACHE.get(SubtypeID).has(value);
              };
            default:
              return function() {
                return false;
              };
          }
        })()
      });
      Reflect.defineProperty(Subtype, 'keep', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: (function() {
          switch (Subtype.cacheStrategy) {
            case STRONG:
              return function(value) {
                return Module.prototype.STRONG_CACHE.get(SubtypeID).add(value);
              };
            case WEAK:
              return function(value) {
                return Module.prototype.WEAK_CACHE.get(SubtypeID).add(value);
              };
            case SOFT:
              return function(value) {
                return Module.prototype.SOFT_CACHE.get(SubtypeID).add(value);
              };
            default:
              return function() {};
          }
        })()
      });
      Reflect.defineProperty(Subtype, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: name
      });
      Reflect.defineProperty(Subtype, 'displayName', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Subtype, 'is', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(x) {
          var result;
          if (Subtype.has(x)) {
            return true;
          }
          result = valueIsType(x, Type) && predicate(x);
          if (result) {
            Subtype.keep(x);
          }
          return result;
        }
      });
      Reflect.defineProperty(Subtype, 'meta', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: {
          kind: 'subtype',
          type: Type,
          name: Subtype.displayName,
          predicate: predicate,
          identity: true
        }
      });
      Reflect.defineProperty(Subtype, 'isNotSample', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: Module.prototype.NotSampleG(Subtype)
      });
      // typesCache.set SubtypeID, Subtype
      typesCache.set(SubtypeID, Subtype);
      CACHE.set(Subtype, SubtypeID);
      return Subtype;
    }));
  };

}).call(this);
