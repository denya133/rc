// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(Module) {
    var CACHE, Generic, PRODUCTION, SOFT, _, assert, getTypeName, typesCache, valueIsType;
    ({
      PRODUCTION,
      CACHE,
      SOFT,
      Generic,
      Utils: {
        _,
        // uuid
        t: {assert},
        getTypeName,
        valueIsType
      }
    } = Module.prototype);
    typesCache = new Map();
    return Module.defineGeneric(Generic('IntersectionG', function(...Types) {
      var Intersection, IntersectionID, cachedType, displayName;
      if (Module.environment !== PRODUCTION) {
        assert(Types.length > 0, 'IntersectionG must be call with Array or many arguments');
      }
      if (Types.length === 1) {
        Types = Types[0];
      }
      if (Module.environment !== PRODUCTION) {
        assert(_.isArray(Types) && Types.length >= 2, `Invalid argument Types ${assert.stringify(Types)} supplied to IntersectionG(Types) (expected an array of at least 2 types)`);
      }
      // _ids = []
      Types = Types.map(function(Type) {
        var t;
        return t = Module.prototype.AccordG(Type);
      });
      // unless (id = CACHE.get t)?
      //   id = uuid.v4()
      //   CACHE.set t, id
      // _ids.push id
      // t
      // IntersectionID = _ids.join()
      if (Module.environment !== PRODUCTION) {
        assert(Types.every(_.isFunction), `Invalid argument Types ${assert.stringify(Types)} supplied to IntersectionG(Types) (expected an array of functions)`);
      }
      displayName = Types.map(getTypeName).join(' & ');
      IntersectionID = Types.map(function(T) {
        return T.ID;
      }).join(' & ');
      if ((cachedType = typesCache.get(IntersectionID)) != null) {
        return cachedType;
      }
      Intersection = function(value, path) {
        if (Module.environment === PRODUCTION) {
          return value;
        }
        Intersection.isNotSample(this);
        if (Intersection.has(value)) {
          return value;
        }
        if (path == null) {
          path = [Intersection.displayName];
        }
        assert(Intersection.is(value), `Invalid value ${assert.stringify(value)} supplied to ${path.join('.')}`);
        Intersection.keep(value);
        return value;
      };
      // Reflect.defineProperty Intersection, 'cache',
      //   configurable: no
      //   enumerable: yes
      //   writable: no
      //   value: new Set()
      Reflect.defineProperty(Intersection, 'cacheStrategy', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: SOFT
      });
      Reflect.defineProperty(Intersection, 'ID', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: IntersectionID
      });
      Module.prototype.SOFT_CACHE.set(IntersectionID, new Set());
      Reflect.defineProperty(Intersection, 'has', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.SOFT_CACHE.get(IntersectionID).has(value);
        }
      });
      Reflect.defineProperty(Intersection, 'keep', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.SOFT_CACHE.get(IntersectionID).add(value);
        }
      });
      Reflect.defineProperty(Intersection, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Intersection, 'displayName', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Intersection, 'is', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(x) {
          var result;
          if (Intersection.has(x)) {
            return true;
          }
          result = Types.every(function(type) {
            return valueIsType(x, type);
          });
          if (result) {
            Intersection.keep(x);
          }
          return result;
        }
      });
      Reflect.defineProperty(Intersection, 'meta', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: {
          kind: 'intersection',
          types: Types,
          name: Intersection.displayName,
          identity: true
        }
      });
      Reflect.defineProperty(Intersection, 'isNotSample', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: Module.prototype.NotSampleG(Intersection)
      });
      typesCache.set(IntersectionID, Intersection);
      CACHE.set(Intersection, IntersectionID);
      return Intersection;
    }));
  };

}).call(this);
