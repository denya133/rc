// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  var hasProp = {}.hasOwnProperty;

  module.exports = function(Module) {
    var CACHE, Generic, PRODUCTION, STRONG, _, assert, typesCache;
    ({
      PRODUCTION,
      CACHE,
      STRONG,
      Generic,
      Utils: {
        _,
        t: {assert}
      }
    } = Module.prototype);
    typesCache = new Map();
    return Module.defineGeneric(Generic('EnumG', function(...args) {
      var Enum, cachedType, config, def, displayName, enums, k, v;
      if (Module.environment !== PRODUCTION) {
        assert(args.length > 0, 'EnumG must be call with Array, Object or many arguments');
        config = args.length === 1 ? args[0] : args;
        assert(_.isArray(config) || _.isPlainObject(config), 'EnumG must be call with Array or Plain Object');
        if (_.isPlainObject(config)) {
          enums = [];
          def = new Set((function() {
            var results;
            results = [];
            for (k in config) {
              if (!hasProp.call(config, k)) continue;
              v = config[k];
              enums.push(assert.stringify(k));
              results.push(v);
            }
            return results;
          })());
          displayName = enums.join(' | ');
        } else if (_.isArray(config)) {
          def = new Set(config);
          displayName = [];
          config = config.reduce(function(prev, i) {
            var item;
            item = assert.stringify(i);
            displayName.push(item);
            if (prev[item] == null) {
              prev[item] = item;
            }
            return prev;
          }, {});
          displayName = displayName.join(' | ');
        }
      }
      // NOTE: так как кроме примитивов Строка и Число другие не смогут дать положительный результат в строкой проверке, в енуме не могут быть объявлены объекты, массивы и даты, следователно можно использовать в качестве ключа displayName
      if ((cachedType = typesCache.get(displayName)) != null) {
        return cachedType;
      }
      Enum = function(value, path) {
        if (Module.environment === PRODUCTION) {
          return value;
        }
        Enum.isNotSample(this);
        if (Enum.has(value)) {
          return value;
        }
        if (path == null) {
          path = [Enum.displayName];
        }
        assert(Enum.is(value), `Invalid value ${assert.stringify(value)} supplied to ${path.join('.')} (expected one of ${displayName})`);
        Enum.keep(value);
        return value;
      };
      // Reflect.defineProperty Enum, 'cache',
      //   configurable: no
      //   enumerable: yes
      //   writable: no
      //   value: new Set()
      Reflect.defineProperty(Enum, 'cacheStrategy', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: STRONG
      });
      Reflect.defineProperty(Enum, 'ID', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      if (!Module.prototype.STRONG_CACHE.has(displayName)) {
        Module.prototype.STRONG_CACHE.set(displayName, new Set());
      }
      Reflect.defineProperty(Enum, 'has', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.STRONG_CACHE.get(displayName).has(value);
        }
      });
      Reflect.defineProperty(Enum, 'keep', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.STRONG_CACHE.get(displayName).add(value);
        }
      });
      Reflect.defineProperty(Enum, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Enum, 'displayName', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Enum, 'is', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(x) {
          var result;
          if (Enum.has(x)) {
            return true;
          }
          result = def.has(x);
          if (result) {
            Enum.keep(x);
          }
          return result;
        }
      });
      Reflect.defineProperty(Enum, 'meta', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: {
          kind: 'enums',
          config: config,
          map: def,
          name: Enum.displayName,
          identity: true
        }
      });
      Reflect.defineProperty(Enum, 'isNotSample', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: Module.prototype.NotSampleG(Enum)
      });
      typesCache.set(displayName, Enum);
      CACHE.set(Enum, displayName);
      return Enum;
    }));
  };

}).call(this);
