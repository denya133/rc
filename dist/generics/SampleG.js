// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.

  // Есть понимание что Interface, Struct and Class НЕ тождественные понятия.
  // если описывается класс в его конструкторе может быть передано что угодно, таким образом проводится создание инстанса класса.
  // описание Struct не подходит для проверки инстансов классов и наоборот, т.к. instanceof вернут в обоих случаях false
  // проверка же интерфейса хоть и осуществляет проверку "вроде бы правильно", но опосредованно, т.к. переданный объект может не являться инстансом именно этого "Interface"а - задача интерфейса обеспечить полиморфизм

  // таким образом, если надо проверить некоторый объект, что он инстанс конкретного (пользовательского) класса, то нужно воспользоваться этим генериком
  module.exports = function(Module) {
    var CACHE, Generic, PRODUCTION, SOFT, _, assert, getTypeName, instanceOf, typesCache, uuid;
    ({
      PRODUCTION,
      CACHE,
      SOFT,
      Generic,
      Utils: {
        _,
        uuid,
        t: {assert},
        getTypeName,
        instanceOf
      }
    } = Module.prototype);
    typesCache = new Map();
    return Module.defineGeneric(Generic('SampleG', function(Class) {
      var Sample, SampleID, cachedType, displayName, nonCustomType;
      if (Module.environment !== PRODUCTION) {
        assert(_.isFunction(Class), `Invalid argument Class ${assert.stringify(Class)} supplied to SampleG(Class) (expected a function)`);
      }
      displayName = `Sample<${getTypeName(Class)}>`;
      SampleID = `Sample<${getTypeName(Class)}>${uuid.v4()}`;
      if ((cachedType = typesCache.get(Class)) != null) {
        return cachedType;
      }
      if ((nonCustomType = Module.prototype.AccordG(Class)) !== Class) {
        typesCache.set(Class, nonCustomType);
        return nonCustomType;
      }
      Sample = function(value, path) {
        if (Module.environment === PRODUCTION) {
          return value;
        }
        Sample.isNotSample(this);
        if (Sample.has(value)) {
          return value;
        }
        if (path == null) {
          path = [Sample.displayName];
        }
        assert(Sample.is(value), `Invalid value ${assert.stringify(value)} supplied to ${path.join('.')} (expected a sample of ${getTypeName(Class)})`);
        Sample.keep(value);
        return value;
      };
      // Reflect.defineProperty Sample, 'cache',
      //   configurable: no
      //   enumerable: yes
      //   writable: no
      //   value: new Set()
      Reflect.defineProperty(Sample, 'cacheStrategy', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: SOFT
      });
      Reflect.defineProperty(Sample, 'ID', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: SampleID
      });
      Module.prototype.SOFT_CACHE.set(SampleID, new Set());
      Reflect.defineProperty(Sample, 'has', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.SOFT_CACHE.get(SampleID).has(value);
        }
      });
      Reflect.defineProperty(Sample, 'keep', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.SOFT_CACHE.get(SampleID).add(value);
        }
      });
      Reflect.defineProperty(Sample, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Sample, 'displayName', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Sample, 'is', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(x) {
          return instanceOf(x, Class);
        }
      });
      Reflect.defineProperty(Sample, 'meta', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: {
          kind: 'sample',
          type: Class,
          name: Sample.displayName,
          predicate: Sample.is,
          identity: true
        }
      });
      Reflect.defineProperty(Sample, 'isNotSample', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: Module.prototype.NotSampleG(Sample)
      });
      typesCache.set(Class, Sample);
      CACHE.set(Sample, SampleID);
      return Sample;
    }));
  };

}).call(this);
