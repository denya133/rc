// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(Module) {
    var CACHE, Generic, PRODUCTION, SOFT, _, assert, getTypeName, isSubsetOf, typesCache;
    ({
      PRODUCTION,
      CACHE,
      SOFT,
      Generic,
      Utils: {
        _,
        t: {assert},
        getTypeName,
        isSubsetOf
      }
    } = Module.prototype);
    typesCache = new Map();
    return Module.defineGeneric(Generic('SubsetG', function(Type) {
      var Subset, SubsetID, cachedType, displayName;
      if (Module.environment !== PRODUCTION) {
        assert(_.isFunction(Type), `Invalid argument Type ${assert.stringify(Type)} supplied to SubsetG(Type) (expected a type)`);
      }
      displayName = `<< ${getTypeName(Type)}`;
      SubsetID = `<< ${Type.ID}`;
      if ((cachedType = typesCache.get(SubsetID)) != null) {
        return cachedType;
      }
      Subset = function(value, path) {
        if (Module.environment === PRODUCTION) {
          return value;
        }
        Subset.isNotSample(this);
        if (Subset.has(value)) {
          return value;
        }
        if (path == null) {
          path = [Subset.displayName];
        }
        assert(Subset.is(value), `Invalid value ${assert.stringify(value)} supplied to ${path.join('.')} (expected a subset of ${getTypeName(Type)})`);
        Subset.keep(value);
        return value;
      };
      // Reflect.defineProperty Subset, 'cache',
      //   configurable: no
      //   enumerable: yes
      //   writable: no
      //   value: new Set()
      Reflect.defineProperty(Subset, 'cacheStrategy', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: SOFT
      });
      Reflect.defineProperty(Subset, 'ID', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: SubsetID
      });
      Module.prototype.SOFT_CACHE.set(SubsetID, new Set());
      Reflect.defineProperty(Subset, 'has', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.SOFT_CACHE.get(SubsetID).has(value);
        }
      });
      Reflect.defineProperty(Subset, 'keep', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(value) {
          return Module.prototype.SOFT_CACHE.get(SubsetID).add(value);
        }
      });
      Reflect.defineProperty(Subset, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Subset, 'displayName', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: displayName
      });
      Reflect.defineProperty(Subset, 'is', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(x) {
          var result;
          if (Subset.has(x)) {
            return true;
          }
          result = isSubsetOf(x, Type);
          if (result) {
            Subset.keep(x);
          }
          return result;
        }
      });
      Reflect.defineProperty(Subset, 'meta', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: {
          kind: 'subset',
          type: Type,
          name: displayName,
          predicate: Subset.is,
          identity: true
        }
      });
      Reflect.defineProperty(Subset, 'isNotSample', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: Module.prototype.NotSampleG(Subset)
      });
      typesCache.set(SubsetID, Subset);
      CACHE.set(Subset, SubsetID);
      return Subset;
    }));
  };

}).call(this);
