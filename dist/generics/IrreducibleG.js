// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(Module) {
    var CACHE, Generic, NON, PRODUCTION, SOFT, STRONG, WEAK, _, assert;
    ({
      PRODUCTION,
      CACHE,
      STRONG,
      WEAK,
      SOFT,
      NON,
      Generic,
      Utils: {
        _,
        t: {assert}
      }
    } = Module.prototype);
    return Module.defineGeneric(Generic('IrreducibleG', function(name, predicate, cacheStrategy = SOFT) {
      var Irreducible;
      if (Module.environment !== PRODUCTION) {
        assert(_.isString(name), `Invalid argument name ${assert.stringify(name)} supplied to IrreducibleG(name, predicate) (expected a string)`);
        assert(_.isFunction(predicate), `Invalid argument predicate ${assert.stringify(predicate)} supplied to IrreducibleG(name, predicate) (expected a function)`);
      }
      Irreducible = function(value, path) {
        if (Module.environment === PRODUCTION) {
          return value;
        }
        Irreducible.isNotSample(this);
        if (Irreducible.has(value)) {
          return value;
        }
        if (path == null) {
          path = [Irreducible.displayName];
        }
        assert(Irreducible.is(value), `Invalid value ${assert.stringify(value)} supplied to ${path.join('.')} (expected a ${Irreducible.displayName})`);
        Irreducible.keep(value);
        return value;
      };
      // Reflect.defineProperty Irreducible, 'cache',
      //   configurable: no
      //   enumerable: yes
      //   writable: no
      //   value: new Set()
      Reflect.defineProperty(Irreducible, 'cacheStrategy', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: cacheStrategy
      });
      Reflect.defineProperty(Irreducible, 'ID', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: name
      });
      switch (Irreducible.cacheStrategy) {
        case STRONG:
          if (!Module.prototype.STRONG_CACHE.has(name)) {
            Module.prototype.STRONG_CACHE.set(name, new Set());
          }
          break;
        case WEAK:
          Module.prototype.WEAK_CACHE.set(name, new WeakSet());
          break;
        case SOFT:
          Module.prototype.SOFT_CACHE.set(name, new Set());
      }
      Reflect.defineProperty(Irreducible, 'has', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: (function() {
          switch (Irreducible.cacheStrategy) {
            case STRONG:
              return function(value) {
                return Module.prototype.STRONG_CACHE.get(name).has(value);
              };
            case WEAK:
              return function(value) {
                return Module.prototype.WEAK_CACHE.get(name).has(value);
              };
            case SOFT:
              return function(value) {
                return Module.prototype.SOFT_CACHE.get(name).has(value);
              };
            default:
              return function() {
                return false;
              };
          }
        })()
      });
      Reflect.defineProperty(Irreducible, 'keep', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: (function() {
          switch (Irreducible.cacheStrategy) {
            case STRONG:
              return function(value) {
                return Module.prototype.STRONG_CACHE.get(name).add(value);
              };
            case WEAK:
              return function(value) {
                return Module.prototype.WEAK_CACHE.get(name).add(value);
              };
            case SOFT:
              return function(value) {
                return Module.prototype.SOFT_CACHE.get(name).add(value);
              };
            default:
              return function() {};
          }
        })()
      });
      Reflect.defineProperty(Irreducible, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: name
      });
      Reflect.defineProperty(Irreducible, 'displayName', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: name
      });
      Reflect.defineProperty(Irreducible, 'is', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: function(x) {
          var result;
          if (Irreducible.has(x)) {
            return true;
          }
          result = predicate(x);
          if (result) {
            Irreducible.keep(x);
          }
          return result;
        }
      });
      Reflect.defineProperty(Irreducible, 'meta', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: {
          kind: 'irreducible',
          name: Irreducible.displayName,
          predicate: predicate,
          identity: true
        }
      });
      Reflect.defineProperty(Irreducible, 'isNotSample', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: Module.prototype.NotSampleG(Irreducible)
      });
      CACHE.set(Irreducible, name);
      return Irreducible;
    }));
  };

}).call(this);
