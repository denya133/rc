// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  var Proto, RC, assign, copy, inflect, isArangoDB, isThenable, jsonStringify, lodash, m, t, uuid;

  copy = require('./utils/copy');

  assign = require('./utils/assign');

  uuid = require('./utils/uuid');

  isThenable = require('./utils/is-thenable');

  isArangoDB = require('./utils/is-arangodb');

  jsonStringify = require('./utils/json-stringify');

  inflect = require('i')();

  lodash = require('lodash');

  t = require('tcomb');

  t.fail = function(message) {
    throw new TypeError(`[RC::TypeT] ${message}`);
  };

  Proto = (function() {
    var ANY, LAMBDA, NILL;

    class Proto {};

    Proto.prototype.ROOT = __dirname;

    Proto.prototype.extend = assign;

    Proto.prototype.assign = assign;

    Proto.prototype.lodash = lodash;

    Proto.prototype._ = lodash;

    Proto.prototype.t = t;

    Proto.prototype.inflect = inflect;

    Proto.prototype.isArangoDB = isArangoDB;

    Proto.prototype.NILL = NILL = function() {}; // when value is null or undefined

    Proto.prototype.ANY = ANY = function() {}; // for any non nil value

    Proto.prototype.LAMBDA = LAMBDA = function() {}; // when needs set function as value

    Proto.prototype.VIRTUAL = 'VIRTUAL';

    Proto.prototype.STATIC = 'STATIC';

    Proto.prototype.ASYNC = 'ASYNC';

    Proto.prototype.CONST = 'CONST';

    Proto.prototype.PUBLIC = 'PUBLIC';

    Proto.prototype.PRIVATE = 'PRIVATE';

    Proto.prototype.PROTECTED = 'PROTECTED';

    Proto.prototype.PRODUCTION = 'production';

    Proto.prototype.DEVELOPMENT = 'development';

    Proto.prototype.CACHE = new Map();

    Proto.prototype.STRONG = 'STRONG';

    Proto.prototype.WEAK = 'WEAK';

    Proto.prototype.SOFT = 'SOFT';

    Proto.prototype.NON = 'NON';

    require('./MetaObject')(Proto);

    require('./CoreObject')(Proto);

    require('./Module')(Proto);

    return Proto;

  }).call(this);

  RC = (function() {
    var ANY, LAMBDA, NILL, cphUtilsMap, cpoUtils, cpoUtilsMeta;

    class RC extends Proto.prototype.Module {};

    RC.inheritProtected();

    cphUtilsMap = Symbol.for('~utilsMap');

    cpoUtils = Symbol.for('~utils');

    cpoUtilsMeta = Symbol.for('~utilsMeta');

    RC[cpoUtilsMeta] = void 0;

    RC[cphUtilsMap] = void 0;

    RC[cpoUtils] = void 0;

    RC.root(__dirname);

    RC.util({
      copy: copy
    });

    RC.util({
      extend: assign
    });

    RC.util({
      assign: assign
    });

    RC.util({
      uuid: uuid
    });

    RC.util({
      isThenable: isThenable
    });

    RC.util({
      isArangoDB: isArangoDB
    });

    RC.util({
      jsonStringify: jsonStringify
    });

    RC.util({
      lodash: lodash
    });

    RC.util({
      _: lodash
    });

    RC.util({
      t: t
    });

    RC.util({
      inflect: inflect
    });

    RC.const({
      CACHE: new Map()
    });

    RC.const({
      STRONG_CACHE: new Map()
    });

    RC.const({
      WEAK_CACHE: new Map()
    });

    RC.const({
      SOFT_CACHE: new Map()
    });

    require('./utils/has-native-promise')(RC);

    require('./utils/read-file')(RC);

    require('./utils/files-list')(RC);

    require('./utils/files-list-sync')(RC);

    require('./utils/files-tree')(RC);

    require('./utils/files-tree-sync')(RC);

    require('./utils/instance-of')(RC);

    require('./utils/get-optional-arguments-index')(RC);

    require('./utils/get-type-name')(RC);

    require('./utils/create-by-type')(RC);

    require('./utils/from-json')(RC);

    require('./utils/is-subset-of')(RC);

    require('./utils/value-is-type')(RC);

    require('./utils/match')(RC);

    require('./utils/co')(RC);

    require('./utils/for-each')(RC);

    require('./utils/map')(RC);

    require('./utils/filter')(RC);

    require('./utils/set-timeout')(RC);

    require('./utils/request')(RC);

    RC.const({
      NILL: NILL = function() {} // when value is null or undefined
    });

    RC.const({
      ANY: ANY = function() {} // for any non nil value
    });

    RC.const({
      LAMBDA: LAMBDA = function() {} // when needs set function as value
    });

    RC.const({
      VIRTUAL: 'VIRTUAL'
    });

    RC.const({
      STATIC: 'STATIC'
    });

    RC.const({
      ASYNC: 'ASYNC'
    });

    RC.const({
      CONST: 'CONST'
    });

    RC.const({
      PUBLIC: 'PUBLIC'
    });

    RC.const({
      PRIVATE: 'PRIVATE'
    });

    RC.const({
      PROTECTED: 'PROTECTED'
    });

    RC.const({
      PRODUCTION: 'production'
    });

    RC.const({
      DEVELOPMENT: 'development'
    });

    RC.const({
      STRONG: 'STRONG'
    });

    RC.const({
      WEAK: 'WEAK'
    });

    RC.const({
      SOFT: 'SOFT'
    });

    RC.const({
      NON: 'NON'
    });

    require('./MetaObject')(RC);

    require('./CoreObject')(RC);

    require('./Module')(RC);

    require('./Promise')(RC);

    RC.const({
      MetaObject: RC.prototype.MetaObject
    });

    RC.const({
      CoreObject: RC.prototype.CoreObject
    });

    RC.const({
      Class: RC.prototype.Class
    });

    RC.const({
      Module: RC.prototype.Module
    });

    RC.const({
      Promise: RC.prototype.Promise
    });

    require('./generics/Mixin')(RC);

    require('./generics/Generic')(RC);

    require('./generics/Declare')(RC);

    require('./generics/AccordG')(RC);

    require('./generics/AsyncFuncG')(RC);

    require('./generics/DictG')(RC);

    require('./generics/EnumG')(RC);

    require('./generics/FuncG')(RC);

    require('./generics/InterfaceG')(RC);

    require('./generics/IntersectionG')(RC);

    require('./generics/IrreducibleG')(RC);

    require('./generics/ListG')(RC);

    require('./generics/MapG')(RC);

    require('./generics/MaybeG')(RC);

    require('./generics/NotSampleG')(RC);

    require('./generics/SampleG')(RC);

    require('./generics/SetG')(RC);

    require('./generics/StructG')(RC);

    require('./generics/SubsetG')(RC);

    require('./generics/SubtypeG')(RC);

    require('./generics/TupleG')(RC);

    require('./generics/UnionG')(RC);

    require('./types/TypeT')(RC);

    require('./types/AnyT')(RC);

    require('./types/ArrayT')(RC);

    require('./types/BooleanT')(RC);

    require('./types/BufferT')(RC);

    require('./types/ClassT')(RC);

    require('./types/DateT')(RC);

    require('./types/DictT')(RC);

    require('./types/EnumT')(RC);

    require('./types/ErrorT')(RC);

    require('./types/EventEmitterT')(RC);

    require('./types/FunctionT')(RC);

    require('./types/AsyncFunctionT')(RC);

    require('./types/FunctorT')(RC);

    require('./types/GeneratorFunctionT')(RC);

    require('./types/GeneratorT')(RC);

    require('./types/GenericT')(RC);

    require('./types/NumberT')(RC);

    require('./types/IntegerT')(RC);

    require('./types/InterfaceT')(RC);

    require('./types/IntersectionT')(RC);

    require('./types/LambdaT')(RC);

    require('./types/ListT')(RC);

    require('./types/MapT')(RC);

    require('./types/MaybeT')(RC);

    require('./types/MixinT')(RC);

    require('./types/ModuleT')(RC);

    require('./types/NilT')(RC);

    require('./types/ObjectT')(RC);

    require('./types/PointerT')(RC);

    require('./types/PromiseT')(RC);

    require('./types/RegExpT')(RC);

    require('./types/SetT')(RC);

    require('./types/StreamT')(RC);

    require('./types/StringT')(RC);

    require('./types/StructT')(RC);

    require('./types/SymbolT')(RC);

    require('./types/TupleT')(RC);

    require('./types/UnionT')(RC);

    RC.defineType(RC.prototype.Declare('EventInterface'));

    RC.defineType(RC.prototype.Declare('HookedObjectInterface'));

    RC.defineType(RC.prototype.Declare('StateInterface'));

    RC.defineType(RC.prototype.Declare('StateMachineInterface'));

    RC.defineType(RC.prototype.Declare('TransitionInterface'));

    require('./Interface')(RC);

    require('./interfaces/PromiseInterface')(RC);

    require('./interfaces/HookedObjectInterface')(RC);

    require('./interfaces/TransitionInterface')(RC);

    require('./interfaces/EventInterface')(RC);

    require('./interfaces/StateInterface')(RC);

    require('./interfaces/StateMachineInterface')(RC);

    require('./statemachine/HookedObject')(RC);

    require('./statemachine/State')(RC);

    require('./statemachine/Transition')(RC);

    require('./statemachine/Event')(RC);

    require('./statemachine/StateMachine')(RC);

    require('./mixins/chainsMixin')(RC);

    require('./mixins/stateMachineMixin')(RC);

    RC.public(RC.static({
      inheritProtected: Function
    }, {
      default: function(...args) {
        this.super(...args);
        this[cpoUtilsMeta] = void 0;
        this[cphUtilsMap] = void 0;
        return this[cpoUtils] = void 0;
      }
    }));

    return RC;

  }).call(this);

  m = RC.initialize().freeze();

  module.exports = m;

}).call(this);
