// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(RC) {
    return RC.util({
      filesTreeSync: function(asFoldername, ahOptions = {}) {
        var data, fs, glob, isArangoDB, path;
        ({isArangoDB} = RC.prototype);
        if (isArangoDB()) {
          // Is ArangoDB !!!
          fs = require('fs');
          data = fs.listTree(asFoldername).filter(function(asPath) {
            return (asPath != null ? asPath.length : void 0) > 0;
          });
          if (ahOptions.filesOnly) {
            data = data.filter(function(asPath) {
              return fs.isFile(fs.join(asFoldername, asPath));
            });
          }
          return data;
        } else {
          // Is Node.js !!!
          glob = require('glob');
          path = require('path');
          fs = require('fs');
          data = glob.sync(`${asFoldername}/**/*`, ahOptions);
          if (ahOptions.filesOnly) {
            return data.map(function(asPath) {
              var err;
              try {
                return [asPath, fs.statSync(asPath).isFile()];
              } catch (error) {
                err = error;
                return [asPath, false];
              }
            }).filter(function([asPath, abIsFile]) {
              return abIsFile;
            }).map(function([asPath, abIsFile]) {
              return path.relative(asFoldername, asPath);
            });
          } else {
            data = data.map(function(asPath) {
              return path.relative(asFoldername, asPath);
            });
            return data;
          }
        }
      }
    });
  };

}).call(this);
