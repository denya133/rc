// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(RC) {
    return RC.util({
      filesTree: function(asFoldername, ahOptions = {}) {
        var _, hasNativePromise, isArangoDB;
        ({_, isArangoDB, hasNativePromise} = RC.prototype);
        return RC.prototype.Promise.new(function(resolve, reject) {
          var data, e, fs, glob, path;
          if (isArangoDB() || !hasNativePromise()) {
            try {
              // Is ArangoDB !!!
              fs = require('fs');
              data = fs.listTree(asFoldername).filter(function(asPath) {
                return (asPath != null ? asPath.length : void 0) > 0;
              });
              if (ahOptions.filesOnly) {
                data = data.filter(function(asPath) {
                  return fs.isFile(fs.join(asFoldername, asPath));
                });
              }
            } catch (error) {
              e = error;
              return reject(e);
            }
            resolve(data);
          } else {
            // Is Node.js !!!
            glob = require('glob');
            path = require('path');
            fs = require('fs');
            glob(`${asFoldername}/**/*`, ahOptions, function(err, data) {
              var promise;
              if (err != null) {
                reject(err);
              } else {
                if (ahOptions.filesOnly) {
                  promise = RC.prototype.Promise.all(data.map(function(asPath) {
                    return RC.prototype.Promise.new(function(resolveStats) {
                      fs.stat(asPath, function(aoErr, aoStats) {
                        if (aoErr != null) {
                          return resolveStats([asPath, false]);
                        } else {
                          return resolveStats([asPath, aoStats.isFile()]);
                        }
                      });
                    });
                  })).then(function(alPaths) {
                    return alPaths.filter(function([asPath, abIsFile]) {
                      return abIsFile;
                    }).map(function([asPath, abIsFile]) {
                      return path.relative(asFoldername, asPath);
                    });
                  });
                  resolve(promise);
                } else {
                  data = data.map(function(asPath) {
                    return path.relative(asFoldername, asPath);
                  });
                  resolve(data);
                }
              }
            });
          }
        });
      }
    });
  };

}).call(this);
