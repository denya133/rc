// Generated by CoffeeScript 2.5.1
(function() {
  // This file is part of RC.

  // RC is free software: you can redistribute it and/or modify
  // it under the terms of the GNU Lesser General Public License as published by
  // the Free Software Foundation, either version 3 of the License, or
  // (at your option) any later version.

  // RC is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  // GNU Lesser General Public License for more details.

  // You should have received a copy of the GNU Lesser General Public License
  // along with RC.  If not, see <https://www.gnu.org/licenses/>.
  module.exports = function(Module) {
    var CACHE, PRODUCTION, _, assert, instanceOf, resultsCache, uuid;
    ({
      PRODUCTION,
      CACHE,
      Utils: {
        _,
        uuid,
        t: {assert},
        instanceOf
      }
    } = Module.prototype);
    resultsCache = new Map();
    return Module.util({
      valueIsType: function(x, Type) {
        var ID, _ids, cachedResult, id, nonCustomType, result;
        if (Module.environment === PRODUCTION) {
          return true;
        }
        _ids = [];
        if ((id = CACHE.get(x)) == null) {
          id = uuid.v4();
          CACHE.set(x, id);
        }
        _ids.push(id);
        if ((id = CACHE.get(Type)) == null) {
          id = uuid.v4();
          CACHE.set(Type, id);
        }
        _ids.push(id);
        ID = _ids.join();
        // ID = id#Type.ID ? uuid.v4()
        if ((cachedResult = resultsCache.get(ID)) != null) {
          return cachedResult;
        }
        assert(_.isFunction(Type), `Invalid argument Type ${assert.stringify(Type)} supplied to valueIsType(x, Type) (expected a function)`);
        if (Module.prototype.TypeT.is(Type)) {
          result = Type.is(x);
        } else if ((nonCustomType = Module.prototype.AccordG(Type)) !== Type) {
          result = nonCustomType.is(x);
        } else {
          result = instanceOf(x, Type);
        }
        resultsCache.set(ID, result);
        return result;
      }
    });
  };

}).call(this);
